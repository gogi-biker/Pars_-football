from .structure import Structure
from types import MappingProxyType


class GoalkeeperIndicators(Structure):
    """
    :param totalPass: ...
    :param accuratePass: ...
    :param totalLongBalls: ...
    :param accurateLongBalls: ...
    :param bigChanceCreated: ...
    :param bigChanceMissed: ...
    :param saves: ...
    :param minutesPlayed: ...
    :param touches: ...
    :param rating: ...
    :param possessionLostCtrl: ...
    :param keyPass: ...
    """
    _fields = MappingProxyType({"totalPass": 13, "accuratePass": 9, "totalLongBalls": 6, "accurateLongBalls": 2,
                                "bigChanceCreated": 0, "bigChanceMissed": 0, "saves": 3, "minutesPlayed": 90,
                                "touches": 22, "rating": 7.3, "possessionLostCtrl": 4, "keyPass": 0})


class PlayerIndicators(Structure):
    """
    :param totalPass: ...
    :param accuratePass: ...
    :param totalLongBalls: ...
    :param accurateLongBalls: ...
    :param totalCross: ...
    :param accurateCross: ...
    :param aerialLost: ...
    :param aerialWon: ...
    :param duelLost: ...
    :param duelWon: ...
    :param dispossessed: ...
    :param bigChanceCreated: ...
    :param bigChanceMissed: ...
    :param totalClearance: ...
    :param outfielderBlock: ...
    :param interceptionWon: ...
    :param totalTackle: ...
    :param wasFouled: ...
    :param fouls: ...
    :param minutesPlayed: ...
    :param touches: ...
    :param rating: ...
    :param possessionLostCtrl: ...
    :param keyPass: ...
    """
    _fields = MappingProxyType({"totalPass": int, "accuratePass": int, "totalLongBalls": int, "accurateLongBalls": int,
                                "totalCross": int, "accurateCross": int, "aerialLost": int, "aerialWon": int,
                                "duelLost": int, "duelWon": int, "dispossessed": int, "bigChanceCreated": int,
                                "bigChanceMissed": int, "totalClearance": int, "outfielderBlock": int,
                                "interceptionWon": int, "totalTackle": int, "wasFouled": int, "fouls": int,
                                "minutesPlayed": int, "touches": int, "rating": float, "possessionLostCtrl": int,
                                "keyPass": int})


class TeamIndicators(Structure):
    """
    :param name: Team name
    :param ball_possession: ...
    :param total_shots: ...
    :param shots_on_target: ...
    :param shots_off_target: ...
    :param blocked_shots: ...
    :param corner_kicks: ...
    :param offsides: ...
    :param fouls: ...
    :param yellow_cards: ...
    :param red_cards: ...
    :param big_chances: ...
    :param big_chances_missed: ...
    :param counter_attacks: ...
    :param hit_woodwork: ...
    :param shots_inside_box: ...
    :param shots_outside_box: ...
    :param goalkeeper_saves: ...
    :param passes: ...
    :param accurate_passes: ...
    :param long_balls: ...
    :param crosses: ...
    :param dribbles: ...
    :param possession_lost: ...
    :param duels_won: ...
    :param aerials_won: ...
    :param tackles: ...
    :param interceptions: ...
    :param clearances: ...
    """
    _fields = MappingProxyType({"name": str, "ball_possession": int, "total_shots": int, "shots_on_target": int,
                                "shots_off_target": int, "blocked_shots": int, "corner_kicks": int, "offsides": int,
                                "fouls": int, "yellow_cards": int, "red_cards": int, "big_chances": int,
                                "big_chances_missed": int, "counter_attacks": int, "hit_woodwork": int,
                                "shots_inside_box": int, "shots_outside_box": int, "goalkeeper_saves": int,
                                "passes": int, "accurate_passes": str, "long_balls": str, "crosses": str,
                                "dribbles": str, "possession_lost": int, "duels_won": int, "aerials_won": int,
                                "tackles": int, "interceptions": int, "clearances": int})


class GameIndicators(Structure):
    """
    :param match: Match name # year_team1_result_team2 (2014_MyTeam_10_YourTeam)
    :param all: which time
    :param first: which time
    :param second: which time
    :param players_home: list of players for team home
    :param players_away: list of players for team away
    """
    _fields = MappingProxyType({"match": str, "all": list, "first": list, "second": list, 'players_home': dict,
                                'players_away': dict})
    _collection = MappingProxyType({"name": "gameIndicators", "key": "match"})

    def dict(self):
        self.all = self.all or [TeamIndicators().dict(), TeamIndicators().dict()]
        self.first = self.first or [TeamIndicators().dict(), TeamIndicators().dict()]
        self.second = self.second or [TeamIndicators().dict(), TeamIndicators().dict()]
        return super().dict()
